/**
 * @param elementId {string} - id элемента
 * @param html {string} - html для вставки в верстку
 */
export function renderBlock(elementId, html) {
    const element = document.getElementById(elementId);
    element.innerHTML = html;
}
/**
 * @param message {AnswerRenderToast} - объект с сообщение, которое покажется пользователю
 * @param action {ActionRenderToast} - объект с методом, который выводит в консоль текст при закрытии уведомления
 */
export function renderToast(message, action) {
    let messageText = '';
    if (message != null) {
        messageText = `
      <div id="info-block" class="info-block ${message.type}">
        <p>${message.text}</p>
        <button id="toast-main-action">${(action === null || action === void 0 ? void 0 : action.name) || 'Закрыть'}</button>
      </div>
    `;
    }
    renderBlock('toast-block', messageText);
    const button = document.getElementById('toast-main-action');
    if (button != null) {
        button.onclick = function () {
            if (action != null && action.handler != null) {
                action.handler();
            }
            renderToast(null);
        };
    }
}
export function getUserData(value) {
    if (value == null) {
        return null;
    }
    if ('user' in localStorage) {
        return localStorage["user"];
    }
    return null;
}
export function getFavoritesAmount(favoritesAmount) {
    if (favoritesAmount == null) {
        return null;
    }
    if (`favoritesAmount` in localStorage) {
        return +localStorage["favoritesAmount"];
    }
    return null;
}
/**
 * @param count {number} - количество todo, которое нужно отобразить
 */
export function getTodosByCount(count) {
    for (let i = 1; i <= count; i++) {
        fetch(`https://jsonplaceholder.typicode.com/todos/${i}`)
            .then(response => response.json())
            .then((json) => {
            if (typeof json.userId == 'number'
                && typeof json.id == 'number'
                && typeof json.title == 'string'
                && typeof json.completed == 'boolean') {
                console.log(json);
            }
            else {
                console.log('Пришли не правильные данные');
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xpYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLFNBQWlCLEVBQUUsSUFBWTtJQUN6RCxNQUFNLE9BQU8sR0FBNkIsUUFBUSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUM1RSxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQTtBQUMxQixDQUFDO0FBV0Q7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FBQyxPQUFpQyxFQUFFLE1BQWlDO0lBQzlGLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQTtJQUVwQixJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7UUFDbkIsV0FBVyxHQUFHOytDQUM2QixPQUFPLENBQUMsSUFBSTthQUM5QyxPQUFPLENBQUMsSUFBSTt5Q0FDZ0IsQ0FBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsSUFBSSxLQUFJLFNBQVM7O0tBRTdELENBQUE7S0FDRjtJQUVELFdBQVcsQ0FDVCxhQUFhLEVBQ2IsV0FBVyxDQUNaLENBQUE7SUFFRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDM0QsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO1FBQ2xCLE1BQU0sQ0FBQyxPQUFPLEdBQUc7WUFDZixJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7Z0JBQzVDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQTthQUNqQjtZQUNELFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNuQixDQUFDLENBQUE7S0FDRjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQWM7SUFDeEMsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFFRCxJQUFJLE1BQU0sSUFBSSxZQUFZLEVBQUU7UUFDMUIsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDN0I7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsZUFBd0I7SUFDekQsSUFBSSxlQUFlLElBQUksSUFBSSxFQUFFO1FBQzNCLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFFRCxJQUFJLGlCQUFpQixJQUFJLFlBQVksRUFBRTtRQUNyQyxPQUFPLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUM7S0FDekM7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFTRDs7R0FFRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBYTtJQUUzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9CLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxFQUFFLENBQUM7YUFDckQsSUFBSSxDQUFRLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3hDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2IsSUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksUUFBUTttQkFDM0IsT0FBTyxJQUFJLENBQUMsRUFBRSxJQUFJLFFBQVE7bUJBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRO21CQUM3QixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksU0FBUyxFQUNyQztnQkFDQSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ2xCO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQTthQUMzQztRQUNILENBQUMsQ0FBQyxDQUFBO0tBQ0w7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFyYW0gZWxlbWVudElkIHtzdHJpbmd9IC0gaWQg0Y3Qu9C10LzQtdC90YLQsFxuICogQHBhcmFtIGh0bWwge3N0cmluZ30gLSBodG1sINC00LvRjyDQstGB0YLQsNCy0LrQuCDQsiDQstC10YDRgdGC0LrRg1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyQmxvY2soZWxlbWVudElkOiBzdHJpbmcsIGh0bWw6IHN0cmluZyk6IHZvaWQge1xuICBjb25zdCBlbGVtZW50OiBIVE1MRWxlbWVudCA9IDxIVE1MRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbFxufVxuXG5pbnRlcmZhY2UgQW5zd2VyUmVuZGVyVG9hc3Qge1xuICB0ZXh0OiBzdHJpbmcsXG4gIHR5cGU6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgQWN0aW9uUmVuZGVyVG9hc3Qge1xuICBuYW1lOiBzdHJpbmcsXG4gIGhhbmRsZXI6IEZ1bmN0aW9uXG59XG4vKipcbiAqIEBwYXJhbSBtZXNzYWdlIHtBbnN3ZXJSZW5kZXJUb2FzdH0gLSDQvtCx0YrQtdC60YIg0YEg0YHQvtC+0LHRidC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDQv9C+0LrQsNC20LXRgtGB0Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOXG4gKiBAcGFyYW0gYWN0aW9uIHtBY3Rpb25SZW5kZXJUb2FzdH0gLSDQvtCx0YrQtdC60YIg0YEg0LzQtdGC0L7QtNC+0LwsINC60L7RgtC+0YDRi9C5INCy0YvQstC+0LTQuNGCINCyINC60L7QvdGB0L7Qu9GMINGC0LXQutGB0YIg0L/RgNC4INC30LDQutGA0YvRgtC40Lgg0YPQstC10LTQvtC80LvQtdC90LjRj1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyVG9hc3QobWVzc2FnZTogQW5zd2VyUmVuZGVyVG9hc3QgfCBudWxsLCBhY3Rpb24/OiBBY3Rpb25SZW5kZXJUb2FzdCB8IG51bGwpOiB2b2lkIHtcbiAgbGV0IG1lc3NhZ2VUZXh0ID0gJydcblxuICBpZiAobWVzc2FnZSAhPSBudWxsKSB7XG4gICAgbWVzc2FnZVRleHQgPSBgXG4gICAgICA8ZGl2IGlkPVwiaW5mby1ibG9ja1wiIGNsYXNzPVwiaW5mby1ibG9jayAke21lc3NhZ2UudHlwZX1cIj5cbiAgICAgICAgPHA+JHttZXNzYWdlLnRleHR9PC9wPlxuICAgICAgICA8YnV0dG9uIGlkPVwidG9hc3QtbWFpbi1hY3Rpb25cIj4ke2FjdGlvbj8ubmFtZSB8fCAn0JfQsNC60YDRi9GC0YwnfTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgYFxuICB9XG5cbiAgcmVuZGVyQmxvY2soXG4gICAgJ3RvYXN0LWJsb2NrJyxcbiAgICBtZXNzYWdlVGV4dFxuICApXG5cbiAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvYXN0LW1haW4tYWN0aW9uJylcbiAgaWYgKGJ1dHRvbiAhPSBudWxsKSB7XG4gICAgYnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoYWN0aW9uICE9IG51bGwgJiYgYWN0aW9uLmhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICBhY3Rpb24uaGFuZGxlcigpXG4gICAgICB9XG4gICAgICByZW5kZXJUb2FzdChudWxsKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckRhdGEodmFsdWU6IHVua25vd24pOiBib29sZWFuIHwgbnVsbCB8IHsgdXNlcm5hbWU6IHN0cmluZywgYXZhdGFyVXJsOiBzdHJpbmcgfSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGlmICgndXNlcicgaW4gbG9jYWxTdG9yYWdlKSB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZVtcInVzZXJcIl07XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmF2b3JpdGVzQW1vdW50KGZhdm9yaXRlc0Ftb3VudDogdW5rbm93bik6IG51bWJlciB8IG51bGwge1xuICBpZiAoZmF2b3JpdGVzQW1vdW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgaWYgKGBmYXZvcml0ZXNBbW91bnRgIGluIGxvY2FsU3RvcmFnZSkge1xuICAgIHJldHVybiArbG9jYWxTdG9yYWdlW1wiZmF2b3JpdGVzQW1vdW50XCJdO1xuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb2RvcyB7XG4gIHVzZXJJZDogbnVtYmVyLFxuICBpZDogbnVtYmVyLFxuICB0aXRsZTogc3RyaW5nLFxuICBjb21wbGV0ZWQ6IGJvb2xlYW5cbn1cblxuLyoqXG4gKiBAcGFyYW0gY291bnQge251bWJlcn0gLSDQutC+0LvQuNGH0LXRgdGC0LLQviB0b2RvLCDQutC+0YLQvtGA0L7QtSDQvdGD0LbQvdC+INC+0YLQvtCx0YDQsNC30LjRgtGMXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2Rvc0J5Q291bnQoY291bnQ6IG51bWJlcik6IHZvaWQge1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IGNvdW50OyBpKyspIHtcbiAgICBmZXRjaChgaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3RvZG9zLyR7aX1gKVxuICAgICAgLnRoZW48VG9kb3M+KHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIC50aGVuKChqc29uKSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YganNvbi51c2VySWQgPT0gJ251bWJlcidcbiAgICAgICAgICAmJiB0eXBlb2YganNvbi5pZCA9PSAnbnVtYmVyJ1xuICAgICAgICAgICYmIHR5cGVvZiBqc29uLnRpdGxlID09ICdzdHJpbmcnXG4gICAgICAgICAgJiYgdHlwZW9mIGpzb24uY29tcGxldGVkID09ICdib29sZWFuJ1xuICAgICAgICApIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhqc29uKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfQn9GA0LjRiNC70Lgg0L3QtSDQv9GA0LDQstC40LvRjNC90YvQtSDQtNCw0L3QvdGL0LUnKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG59XG4iXX0=