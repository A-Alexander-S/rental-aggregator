/**
 * @param elementId {string} - id элемента
 * @param html {string} - html для вставки в верстку
 */
export function renderBlock(elementId, html) {
    const element = document.getElementById(elementId);
    element.innerHTML = html;
}
/**
 * @param message {AnswerRenderToast} - объект с сообщение, которое покажется пользователю
 * @param action {ActionRenderToast} - объект с методом, который выводит в консоль текст при закрытии уведомления
 */
export function renderToast(message, action) {
    let messageText = '';
    if (message != null) {
        messageText = `
      <div id="info-block" class="info-block ${message.type}">
        <p>${message.text}</p>
        <button id="toast-main-action">${(action === null || action === void 0 ? void 0 : action.name) || 'Закрыть'}</button>
      </div>
    `;
    }
    renderBlock('toast-block', messageText);
    const button = document.getElementById('toast-main-action');
    if (button != null) {
        button.onclick = function () {
            if (action != null && action.handler != null) {
                action.handler();
            }
            renderToast(null);
        };
    }
}
export function getUserData(value) {
    if (value == null) {
        return null;
    }
    if ('user' in localStorage) {
        return localStorage.user;
    }
    return null;
}
export function getFavoritesAmount(favoritesAmount) {
    if (favoritesAmount == null) {
        return null;
    }
    if (`favoritesAmount` in localStorage) {
        return +localStorage.favoritesAmount;
    }
    return null;
}
/**
 * @param count {number} - количество todo, которое нужно отобразить
 */
export function getTodosByCount(count) {
    for (let i = 1; i <= count; i++) {
        fetch(`https://jsonplaceholder.typicode.com/todos/${i}`)
            .then(response => response.json())
            .then((json) => {
            if (typeof json.userId == 'number'
                && typeof json.id == 'number'
                && typeof json.title == 'string'
                && typeof json.completed == 'boolean') {
                console.log(json);
            }
            else {
                console.log('Пришли не правильные данные');
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xpYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLFNBQWlCLEVBQUUsSUFBWTtJQUN6RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2xELE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO0FBQzFCLENBQUM7QUFXRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLE9BQTBCLEVBQUUsTUFBMEI7SUFDaEYsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFBO0lBRXBCLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtRQUNuQixXQUFXLEdBQUc7K0NBQzZCLE9BQU8sQ0FBQyxJQUFJO2FBQzlDLE9BQU8sQ0FBQyxJQUFJO3lDQUNnQixDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxJQUFJLEtBQUksU0FBUzs7S0FFN0QsQ0FBQTtLQUNGO0lBRUQsV0FBVyxDQUNULGFBQWEsRUFDYixXQUFXLENBQ1osQ0FBQTtJQUVELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtJQUMzRCxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7UUFDbEIsTUFBTSxDQUFDLE9BQU8sR0FBRztZQUNmLElBQUksTUFBTSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtnQkFDNUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFBO2FBQ2pCO1lBQ0QsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ25CLENBQUMsQ0FBQTtLQUNGO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBYztJQUN4QyxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDakIsT0FBTyxJQUFJLENBQUE7S0FDWjtJQUVELElBQUksTUFBTSxJQUFJLFlBQVksRUFBRTtRQUMxQixPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUM7S0FDMUI7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsZUFBd0I7SUFDekQsSUFBSSxlQUFlLElBQUksSUFBSSxFQUFFO1FBQzNCLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFFRCxJQUFJLGlCQUFpQixJQUFJLFlBQVksRUFBRTtRQUNyQyxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQztLQUN0QztJQUVELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQVNEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFhO0lBRTNDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLEVBQUUsQ0FBQzthQUNyRCxJQUFJLENBQVEsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDeEMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDYixJQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxRQUFRO21CQUMzQixPQUFPLElBQUksQ0FBQyxFQUFFLElBQUksUUFBUTttQkFDMUIsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLFFBQVE7bUJBQzdCLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSxTQUFTLEVBQ3JDO2dCQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7YUFDbEI7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO2FBQzNDO1FBQ0gsQ0FBQyxDQUFDLENBQUE7S0FDTDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYXJhbSBlbGVtZW50SWQge3N0cmluZ30gLSBpZCDRjdC70LXQvNC10L3RgtCwXG4gKiBAcGFyYW0gaHRtbCB7c3RyaW5nfSAtIGh0bWwg0LTQu9GPINCy0YHRgtCw0LLQutC4INCyINCy0LXRgNGB0YLQutGDXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJCbG9jayhlbGVtZW50SWQ6IHN0cmluZywgaHRtbDogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbFxufVxuXG5pbnRlcmZhY2UgQW5zd2VyUmVuZGVyVG9hc3Qge1xuICB0ZXh0OiBzdHJpbmcsXG4gIHR5cGU6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgQWN0aW9uUmVuZGVyVG9hc3Qge1xuICBuYW1lOiBzdHJpbmcsXG4gIGhhbmRsZXI6IEZ1bmN0aW9uXG59XG4vKipcbiAqIEBwYXJhbSBtZXNzYWdlIHtBbnN3ZXJSZW5kZXJUb2FzdH0gLSDQvtCx0YrQtdC60YIg0YEg0YHQvtC+0LHRidC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDQv9C+0LrQsNC20LXRgtGB0Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOXG4gKiBAcGFyYW0gYWN0aW9uIHtBY3Rpb25SZW5kZXJUb2FzdH0gLSDQvtCx0YrQtdC60YIg0YEg0LzQtdGC0L7QtNC+0LwsINC60L7RgtC+0YDRi9C5INCy0YvQstC+0LTQuNGCINCyINC60L7QvdGB0L7Qu9GMINGC0LXQutGB0YIg0L/RgNC4INC30LDQutGA0YvRgtC40Lgg0YPQstC10LTQvtC80LvQtdC90LjRj1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyVG9hc3QobWVzc2FnZTogQW5zd2VyUmVuZGVyVG9hc3QsIGFjdGlvbj86IEFjdGlvblJlbmRlclRvYXN0KTogdm9pZCB7XG4gIGxldCBtZXNzYWdlVGV4dCA9ICcnXG5cbiAgaWYgKG1lc3NhZ2UgIT0gbnVsbCkge1xuICAgIG1lc3NhZ2VUZXh0ID0gYFxuICAgICAgPGRpdiBpZD1cImluZm8tYmxvY2tcIiBjbGFzcz1cImluZm8tYmxvY2sgJHttZXNzYWdlLnR5cGV9XCI+XG4gICAgICAgIDxwPiR7bWVzc2FnZS50ZXh0fTwvcD5cbiAgICAgICAgPGJ1dHRvbiBpZD1cInRvYXN0LW1haW4tYWN0aW9uXCI+JHthY3Rpb24/Lm5hbWUgfHwgJ9CX0LDQutGA0YvRgtGMJ308L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIGBcbiAgfVxuXG4gIHJlbmRlckJsb2NrKFxuICAgICd0b2FzdC1ibG9jaycsXG4gICAgbWVzc2FnZVRleHRcbiAgKVxuXG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2FzdC1tYWluLWFjdGlvbicpXG4gIGlmIChidXR0b24gIT0gbnVsbCkge1xuICAgIGJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGFjdGlvbiAhPSBudWxsICYmIGFjdGlvbi5oYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgYWN0aW9uLmhhbmRsZXIoKVxuICAgICAgfVxuICAgICAgcmVuZGVyVG9hc3QobnVsbClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJEYXRhKHZhbHVlOiB1bmtub3duKTogYm9vbGVhbiB8IHsgdXNlcm5hbWU6IHN0cmluZywgYXZhdGFyVXJsOiBzdHJpbmcgfSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGlmICgndXNlcicgaW4gbG9jYWxTdG9yYWdlKSB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS51c2VyO1xuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZhdm9yaXRlc0Ftb3VudChmYXZvcml0ZXNBbW91bnQ6IHVua25vd24pOiBudW1iZXIgfCBib29sZWFuIHtcbiAgaWYgKGZhdm9yaXRlc0Ftb3VudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGlmIChgZmF2b3JpdGVzQW1vdW50YCBpbiBsb2NhbFN0b3JhZ2UpIHtcbiAgICByZXR1cm4gK2xvY2FsU3RvcmFnZS5mYXZvcml0ZXNBbW91bnQ7XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvZG9zIHtcbiAgdXNlcklkOiBudW1iZXIsXG4gIGlkOiBudW1iZXIsXG4gIHRpdGxlOiBzdHJpbmcsXG4gIGNvbXBsZXRlZDogYm9vbGVhblxufVxuXG4vKipcbiAqIEBwYXJhbSBjb3VudCB7bnVtYmVyfSAtINC60L7Qu9C40YfQtdGB0YLQstC+IHRvZG8sINC60L7RgtC+0YDQvtC1INC90YPQttC90L4g0L7RgtC+0LHRgNCw0LfQuNGC0YxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRvZG9zQnlDb3VudChjb3VudDogbnVtYmVyKTogdm9pZCB7XG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gY291bnQ7IGkrKykge1xuICAgIGZldGNoKGBodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vdG9kb3MvJHtpfWApXG4gICAgICAudGhlbjxUb2Rvcz4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4oKGpzb24pID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBqc29uLnVzZXJJZCA9PSAnbnVtYmVyJ1xuICAgICAgICAgICYmIHR5cGVvZiBqc29uLmlkID09ICdudW1iZXInXG4gICAgICAgICAgJiYgdHlwZW9mIGpzb24udGl0bGUgPT0gJ3N0cmluZydcbiAgICAgICAgICAmJiB0eXBlb2YganNvbi5jb21wbGV0ZWQgPT0gJ2Jvb2xlYW4nXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGpzb24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ9Cf0YDQuNGI0LvQuCDQvdC1INC/0YDQsNCy0LjQu9GM0L3Ri9C1INC00LDQvdC90YvQtScpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cbn1cbiJdfQ==